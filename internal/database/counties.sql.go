// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: counties.sql

package database

import (
	"context"
)

const createCounty = `-- name: CreateCounty :one
INSERT INTO counties (id, name, county_given_id)
VALUES (?, ?, ?)
RETURNING id, name, county_given_id, created_at, updated_at
`

type CreateCountyParams struct {
	ID            string
	Name          string
	CountyGivenID int64
}

func (q *Queries) CreateCounty(ctx context.Context, arg CreateCountyParams) (County, error) {
	row := q.db.QueryRowContext(ctx, createCounty, arg.ID, arg.Name, arg.CountyGivenID)
	var i County
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountyGivenID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCountyByGivenId = `-- name: GetCountyByGivenId :one
SELECT id, name, county_given_id, created_at, updated_at FROM counties
WHERE county_given_id = ?
`

func (q *Queries) GetCountyByGivenId(ctx context.Context, countyGivenID int64) (County, error) {
	row := q.db.QueryRowContext(ctx, getCountyByGivenId, countyGivenID)
	var i County
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountyGivenID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCountyByName = `-- name: GetCountyByName :one
SELECT id, name, county_given_id, created_at, updated_at FROM counties
WHERE name = ?
`

func (q *Queries) GetCountyByName(ctx context.Context, name string) (County, error) {
	row := q.db.QueryRowContext(ctx, getCountyByName, name)
	var i County
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountyGivenID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCounties = `-- name: ListCounties :many
SELECT id, name, county_given_id, created_at, updated_at FROM counties
ORDER BY name
LIMIT ? OFFSET ?
`

type ListCountiesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListCounties(ctx context.Context, arg ListCountiesParams) ([]County, error) {
	rows, err := q.db.QueryContext(ctx, listCounties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []County
	for rows.Next() {
		var i County
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CountyGivenID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCountiesByName = `-- name: SearchCountiesByName :many
SELECT id, name, county_given_id, created_at, updated_at FROM counties
WHERE LOWER(name) LIKE '%' || LOWER(?) || '%'
ORDER BY name
LIMIT ? OFFSET ?
`

type SearchCountiesByNameParams struct {
	LOWER  string
	Limit  int64
	Offset int64
}

func (q *Queries) SearchCountiesByName(ctx context.Context, arg SearchCountiesByNameParams) ([]County, error) {
	rows, err := q.db.QueryContext(ctx, searchCountiesByName, arg.LOWER, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []County
	for rows.Next() {
		var i County
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CountyGivenID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
