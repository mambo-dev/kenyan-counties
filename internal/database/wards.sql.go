// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wards.sql

package database

import (
	"context"
)

const createWard = `-- name: CreateWard :one
INSERT INTO wards (id, name, sub_county_id, ward_given_id)
VALUES (?, ?, ?, ?)
RETURNING id, name, sub_county_id, ward_given_id, created_at, updated_at
`

type CreateWardParams struct {
	ID          string
	Name        string
	SubCountyID string
	WardGivenID int64
}

func (q *Queries) CreateWard(ctx context.Context, arg CreateWardParams) (Ward, error) {
	row := q.db.QueryRowContext(ctx, createWard,
		arg.ID,
		arg.Name,
		arg.SubCountyID,
		arg.WardGivenID,
	)
	var i Ward
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubCountyID,
		&i.WardGivenID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWardByGivenID = `-- name: GetWardByGivenID :one
SELECT id, name, sub_county_id, ward_given_id, created_at, updated_at FROM wards
WHERE ward_given_id = ?
`

func (q *Queries) GetWardByGivenID(ctx context.Context, wardGivenID int64) (Ward, error) {
	row := q.db.QueryRowContext(ctx, getWardByGivenID, wardGivenID)
	var i Ward
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubCountyID,
		&i.WardGivenID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWardByID = `-- name: GetWardByID :one
SELECT id, name, sub_county_id, ward_given_id, created_at, updated_at FROM wards
WHERE id = ?
`

func (q *Queries) GetWardByID(ctx context.Context, id string) (Ward, error) {
	row := q.db.QueryRowContext(ctx, getWardByID, id)
	var i Ward
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubCountyID,
		&i.WardGivenID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWardsBySubCountyID = `-- name: GetWardsBySubCountyID :many
SELECT id, name, sub_county_id, ward_given_id, created_at, updated_at FROM wards
WHERE sub_county_id = ?
ORDER BY name
LIMIT ? OFFSET ?
`

type GetWardsBySubCountyIDParams struct {
	SubCountyID string
	Limit       int64
	Offset      int64
}

func (q *Queries) GetWardsBySubCountyID(ctx context.Context, arg GetWardsBySubCountyIDParams) ([]Ward, error) {
	rows, err := q.db.QueryContext(ctx, getWardsBySubCountyID, arg.SubCountyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ward
	for rows.Next() {
		var i Ward
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubCountyID,
			&i.WardGivenID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchWardsByName = `-- name: SearchWardsByName :many
SELECT id, name, sub_county_id, ward_given_id, created_at, updated_at FROM wards
WHERE LOWER(name) LIKE '%' || LOWER(?) || '%'
ORDER BY name
LIMIT ? OFFSET ?
`

type SearchWardsByNameParams struct {
	LOWER  string
	Limit  int64
	Offset int64
}

func (q *Queries) SearchWardsByName(ctx context.Context, arg SearchWardsByNameParams) ([]Ward, error) {
	rows, err := q.db.QueryContext(ctx, searchWardsByName, arg.LOWER, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ward
	for rows.Next() {
		var i Ward
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubCountyID,
			&i.WardGivenID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
