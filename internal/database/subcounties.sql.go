// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subcounties.sql

package database

import (
	"context"
)

const createSubCounty = `-- name: CreateSubCounty :one
INSERT INTO sub_counties (id, name, county_id)
VALUES (?, ?, ?)
RETURNING id, name, county_id, created_at, updated_at
`

type CreateSubCountyParams struct {
	ID       string
	Name     string
	CountyID string
}

func (q *Queries) CreateSubCounty(ctx context.Context, arg CreateSubCountyParams) (SubCounty, error) {
	row := q.db.QueryRowContext(ctx, createSubCounty, arg.ID, arg.Name, arg.CountyID)
	var i SubCounty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubCountiesByCountyID = `-- name: GetSubCountiesByCountyID :many
SELECT id, name, county_id, created_at, updated_at FROM sub_counties
WHERE county_id = ?
ORDER BY name
LIMIT ? OFFSET ?
`

type GetSubCountiesByCountyIDParams struct {
	CountyID string
	Limit    int64
	Offset   int64
}

func (q *Queries) GetSubCountiesByCountyID(ctx context.Context, arg GetSubCountiesByCountyIDParams) ([]SubCounty, error) {
	rows, err := q.db.QueryContext(ctx, getSubCountiesByCountyID, arg.CountyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubCounty
	for rows.Next() {
		var i SubCounty
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CountyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubCountyByID = `-- name: GetSubCountyByID :one
SELECT id, name, county_id, created_at, updated_at FROM sub_counties
WHERE id = ?
`

func (q *Queries) GetSubCountyByID(ctx context.Context, id string) (SubCounty, error) {
	row := q.db.QueryRowContext(ctx, getSubCountyByID, id)
	var i SubCounty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CountyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchSubCountiesByName = `-- name: SearchSubCountiesByName :many
SELECT id, name, county_id, created_at, updated_at FROM sub_counties
WHERE LOWER(name) LIKE '%' || LOWER(?) || '%'
ORDER BY name
LIMIT ? OFFSET ?
`

type SearchSubCountiesByNameParams struct {
	LOWER  string
	Limit  int64
	Offset int64
}

func (q *Queries) SearchSubCountiesByName(ctx context.Context, arg SearchSubCountiesByNameParams) ([]SubCounty, error) {
	rows, err := q.db.QueryContext(ctx, searchSubCountiesByName, arg.LOWER, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubCounty
	for rows.Next() {
		var i SubCounty
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CountyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
